var Quercus=function(){"use strict";const t=(n,r,s=!1)=>{let u=n;let c;let i=!0;1===r.length?c=r[0]:(n.has(r[0])&&e.isTreeNode(n.get(r[0]))?u=n.get(r[0]):s?(u=new e,n.set(r[0],u)):i=!1,c=r[1]);return r.length>2&&i?t(u,r.slice(1),s):{success:i,key:c,target:u}};class e extends Map{static isTreeNode(t){return t instanceof e}constructor(t=[]){super(),t.forEach(t=>this.setPath(t[0],t[1]))}hasPath(n,r=!1){if(0===n.length)return r;const s=t(this,n);return!(!s.success||!s.target.has(s.key))&&(!!r||!e.isTreeNode(s.target.get(s.key)))}getPath(e){if(0===e.length)return this;const n=t(this,e);return n.success&&n.target.has(n.key)?n.target.get(n.key):null}setPath(e,n){if(0===e.length)return null;const r=t(this,e,!0);return r.target.set(r.key,n),r.target}}return e}();
