var Quercus=function(){"use strict";const t=(n,s,r=!1)=>{let u=n;let c=s[0];let i=!0;if(s.length>1){const t=n.get(c);n.has(c)&&e.isQuercus(t)?u=t:r?(u=new e,n.set(c,u)):i=!1,c=s[1]}return s.length>2&&i?t(u,s.slice(1),r):{target:u,key:c,success:i}};class e extends Map{static isQuercus(t){return t instanceof e}constructor(t=[]){super(),t.forEach(t=>this.setPath(t[0],t[1]))}hasPath(n,s=!1){if(0===n.length)return s;const r=t(this,n);return!(!r.success||!r.target.has(r.key))&&(!!s||!e.isQuercus(r.target.get(r.key)))}getPath(e){if(0===e.length)return this;const n=t(this,e);return n.success&&n.target.has(n.key)?n.target.get(n.key):null}setPath(e,n){if(0===e.length)return null;const s=t(this,e,!0);return s.target.set(s.key,n),s.target}}return e}();
