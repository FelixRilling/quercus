var Quercus=function(){"use strict";const t=(t,n)=>t instanceof n,n=(t,s,r=!1)=>{let u;let c;let i=!0;0===s.length?(u=t,c=[]):1===s.length?(u=t,c=s):(t.has(s[0])?u=t.get(s[0]):r?(u=new e,t.set(s[0],u)):i=!1,c=s.slice(1));return c.length>1?n(u,c,r):{success:i,rest:c[0],target:u}},e=class extends Map{constructor(t=[]){super(),t.forEach(t=>{this.setPath(t[0],t[1])})}static isTreeNode(n){return t(n,e)}hasPath(t=[],s=!0){const{target:target,rest:rest,sucess:sucess}=n(this,t);if(sucess){const t=target.get(rest);return!s||!e.isTreeNode(t)}return!1}getPath(t=[]){const{target:target,rest:rest,sucess:sucess}=n(this,t);return sucess?target.get(rest):null}setPath(t=[],e){const{target:target,rest:rest}=n(this,t,!0);return target.set(rest,e),!0}};return e}();
